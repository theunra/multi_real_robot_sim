// Generated by gencpp from file nubot_common/WorldModelInfo.msg
// DO NOT EDIT!


#ifndef NUBOT_COMMON_MESSAGE_WORLDMODELINFO_H
#define NUBOT_COMMON_MESSAGE_WORLDMODELINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <nubot_common/ObstaclesInfo.h>
#include <nubot_common/ObstaclesInfo.h>
#include <nubot_common/RobotInfo.h>
#include <nubot_common/BallInfo.h>
#include <nubot_common/CoachInfo.h>
#include <nubot_common/PassCommands.h>

namespace nubot_common
{
template <class ContainerAllocator>
struct WorldModelInfo_
{
  typedef WorldModelInfo_<ContainerAllocator> Type;

  WorldModelInfo_()
    : header()
    , obstacleinfo()
    , oppinfo()
    , robotinfo()
    , ballinfo()
    , coachinfo()
    , pass_cmd()  {
    }
  WorldModelInfo_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , obstacleinfo(_alloc)
    , oppinfo(_alloc)
    , robotinfo(_alloc)
    , ballinfo(_alloc)
    , coachinfo(_alloc)
    , pass_cmd(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::nubot_common::ObstaclesInfo_<ContainerAllocator>  _obstacleinfo_type;
  _obstacleinfo_type obstacleinfo;

   typedef  ::nubot_common::ObstaclesInfo_<ContainerAllocator>  _oppinfo_type;
  _oppinfo_type oppinfo;

   typedef std::vector< ::nubot_common::RobotInfo_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::nubot_common::RobotInfo_<ContainerAllocator> >::other >  _robotinfo_type;
  _robotinfo_type robotinfo;

   typedef std::vector< ::nubot_common::BallInfo_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::nubot_common::BallInfo_<ContainerAllocator> >::other >  _ballinfo_type;
  _ballinfo_type ballinfo;

   typedef  ::nubot_common::CoachInfo_<ContainerAllocator>  _coachinfo_type;
  _coachinfo_type coachinfo;

   typedef  ::nubot_common::PassCommands_<ContainerAllocator>  _pass_cmd_type;
  _pass_cmd_type pass_cmd;





  typedef boost::shared_ptr< ::nubot_common::WorldModelInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nubot_common::WorldModelInfo_<ContainerAllocator> const> ConstPtr;

}; // struct WorldModelInfo_

typedef ::nubot_common::WorldModelInfo_<std::allocator<void> > WorldModelInfo;

typedef boost::shared_ptr< ::nubot_common::WorldModelInfo > WorldModelInfoPtr;
typedef boost::shared_ptr< ::nubot_common::WorldModelInfo const> WorldModelInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::nubot_common::WorldModelInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::nubot_common::WorldModelInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::nubot_common::WorldModelInfo_<ContainerAllocator1> & lhs, const ::nubot_common::WorldModelInfo_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.obstacleinfo == rhs.obstacleinfo &&
    lhs.oppinfo == rhs.oppinfo &&
    lhs.robotinfo == rhs.robotinfo &&
    lhs.ballinfo == rhs.ballinfo &&
    lhs.coachinfo == rhs.coachinfo &&
    lhs.pass_cmd == rhs.pass_cmd;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::nubot_common::WorldModelInfo_<ContainerAllocator1> & lhs, const ::nubot_common::WorldModelInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace nubot_common

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::nubot_common::WorldModelInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nubot_common::WorldModelInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nubot_common::WorldModelInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nubot_common::WorldModelInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nubot_common::WorldModelInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nubot_common::WorldModelInfo_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::nubot_common::WorldModelInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7d184d155b8f964299d2ae834875aebd";
  }

  static const char* value(const ::nubot_common::WorldModelInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7d184d155b8f9642ULL;
  static const uint64_t static_value2 = 0x99d2ae834875aebdULL;
};

template<class ContainerAllocator>
struct DataType< ::nubot_common::WorldModelInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nubot_common/WorldModelInfo";
  }

  static const char* value(const ::nubot_common::WorldModelInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::nubot_common::WorldModelInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"ObstaclesInfo obstacleinfo\n"
"ObstaclesInfo oppinfo\n"
"RobotInfo[]   robotinfo\n"
"BallInfo[]    ballinfo\n"
"CoachInfo     coachinfo\n"
"PassCommands  pass_cmd\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: nubot_common/ObstaclesInfo\n"
"Header header\n"
"Point2d[] pos\n"
"PPoint[] polar_pos\n"
"\n"
"\n"
"================================================================================\n"
"MSG: nubot_common/Point2d\n"
"float32 x\n"
"float32 y\n"
"\n"
"================================================================================\n"
"MSG: nubot_common/PPoint\n"
"float32 angle\n"
"float32 radius\n"
"\n"
"================================================================================\n"
"MSG: nubot_common/RobotInfo\n"
"Header header\n"
"int32    AgentID\n"
"int32    targetNum1\n"
"int32    targetNum2\n"
"int32    targetNum3\n"
"int32    targetNum4\n"
"int32    staticpassNum\n"
"int32    staticcatchNum\n"
"Point2d  pos\n"
"Angle    heading\n"
"float32  vrot\n"
"Point2d  vtrans\n"
"bool     iskick     \n"
"bool     isvalid \n"
"bool     isstuck \n"
"bool     isdribble\n"
"char     current_role\n"
"float32  role_time\n"
"Point2d  target\n"
" \n"
"\n"
"================================================================================\n"
"MSG: nubot_common/Angle\n"
"float32 theta\n"
"\n"
"================================================================================\n"
"MSG: nubot_common/BallInfo\n"
"Header header\n"
"int32     ballinfostate\n"
"Point2d   pos\n"
"PPoint    real_pos\n"
"Point2d   velocity\n"
"bool      pos_known\n"
"bool      velocity_known\n"
"\n"
"\n"
"================================================================================\n"
"MSG: nubot_common/CoachInfo\n"
"Header header\n"
"char MatchMode\n"
"char MatchType\n"
"char TestMode           \n"
"Point2d pointA\n"
"Point2d pointB\n"
"int16 angleA\n"
"int16 angleB\n"
"char idA\n"
"char idB\n"
"char kickforce\n"
"\n"
"================================================================================\n"
"MSG: nubot_common/PassCommands\n"
"uint32  pass_id\n"
"uint32  catch_id\n"
"Point2d pass_pt\n"
"Point2d catch_pt\n"
"bool    is_passout\n"
"bool    is_dynamic_pass\n"
"bool    is_static_pass\n"
"bool    is_valid\n"
" \n"
;
  }

  static const char* value(const ::nubot_common::WorldModelInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::nubot_common::WorldModelInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.obstacleinfo);
      stream.next(m.oppinfo);
      stream.next(m.robotinfo);
      stream.next(m.ballinfo);
      stream.next(m.coachinfo);
      stream.next(m.pass_cmd);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WorldModelInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nubot_common::WorldModelInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::nubot_common::WorldModelInfo_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "obstacleinfo: ";
    s << std::endl;
    Printer< ::nubot_common::ObstaclesInfo_<ContainerAllocator> >::stream(s, indent + "  ", v.obstacleinfo);
    s << indent << "oppinfo: ";
    s << std::endl;
    Printer< ::nubot_common::ObstaclesInfo_<ContainerAllocator> >::stream(s, indent + "  ", v.oppinfo);
    s << indent << "robotinfo[]" << std::endl;
    for (size_t i = 0; i < v.robotinfo.size(); ++i)
    {
      s << indent << "  robotinfo[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::nubot_common::RobotInfo_<ContainerAllocator> >::stream(s, indent + "    ", v.robotinfo[i]);
    }
    s << indent << "ballinfo[]" << std::endl;
    for (size_t i = 0; i < v.ballinfo.size(); ++i)
    {
      s << indent << "  ballinfo[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::nubot_common::BallInfo_<ContainerAllocator> >::stream(s, indent + "    ", v.ballinfo[i]);
    }
    s << indent << "coachinfo: ";
    s << std::endl;
    Printer< ::nubot_common::CoachInfo_<ContainerAllocator> >::stream(s, indent + "  ", v.coachinfo);
    s << indent << "pass_cmd: ";
    s << std::endl;
    Printer< ::nubot_common::PassCommands_<ContainerAllocator> >::stream(s, indent + "  ", v.pass_cmd);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NUBOT_COMMON_MESSAGE_WORLDMODELINFO_H
