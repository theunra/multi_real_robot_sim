// Generated by gencpp from file nubot_common/PassCommands.msg
// DO NOT EDIT!


#ifndef NUBOT_COMMON_MESSAGE_PASSCOMMANDS_H
#define NUBOT_COMMON_MESSAGE_PASSCOMMANDS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <nubot_common/Point2d.h>
#include <nubot_common/Point2d.h>

namespace nubot_common
{
template <class ContainerAllocator>
struct PassCommands_
{
  typedef PassCommands_<ContainerAllocator> Type;

  PassCommands_()
    : pass_id(0)
    , catch_id(0)
    , pass_pt()
    , catch_pt()
    , is_passout(false)
    , is_dynamic_pass(false)
    , is_static_pass(false)
    , is_valid(false)  {
    }
  PassCommands_(const ContainerAllocator& _alloc)
    : pass_id(0)
    , catch_id(0)
    , pass_pt(_alloc)
    , catch_pt(_alloc)
    , is_passout(false)
    , is_dynamic_pass(false)
    , is_static_pass(false)
    , is_valid(false)  {
  (void)_alloc;
    }



   typedef uint32_t _pass_id_type;
  _pass_id_type pass_id;

   typedef uint32_t _catch_id_type;
  _catch_id_type catch_id;

   typedef  ::nubot_common::Point2d_<ContainerAllocator>  _pass_pt_type;
  _pass_pt_type pass_pt;

   typedef  ::nubot_common::Point2d_<ContainerAllocator>  _catch_pt_type;
  _catch_pt_type catch_pt;

   typedef uint8_t _is_passout_type;
  _is_passout_type is_passout;

   typedef uint8_t _is_dynamic_pass_type;
  _is_dynamic_pass_type is_dynamic_pass;

   typedef uint8_t _is_static_pass_type;
  _is_static_pass_type is_static_pass;

   typedef uint8_t _is_valid_type;
  _is_valid_type is_valid;





  typedef boost::shared_ptr< ::nubot_common::PassCommands_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nubot_common::PassCommands_<ContainerAllocator> const> ConstPtr;

}; // struct PassCommands_

typedef ::nubot_common::PassCommands_<std::allocator<void> > PassCommands;

typedef boost::shared_ptr< ::nubot_common::PassCommands > PassCommandsPtr;
typedef boost::shared_ptr< ::nubot_common::PassCommands const> PassCommandsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::nubot_common::PassCommands_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::nubot_common::PassCommands_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::nubot_common::PassCommands_<ContainerAllocator1> & lhs, const ::nubot_common::PassCommands_<ContainerAllocator2> & rhs)
{
  return lhs.pass_id == rhs.pass_id &&
    lhs.catch_id == rhs.catch_id &&
    lhs.pass_pt == rhs.pass_pt &&
    lhs.catch_pt == rhs.catch_pt &&
    lhs.is_passout == rhs.is_passout &&
    lhs.is_dynamic_pass == rhs.is_dynamic_pass &&
    lhs.is_static_pass == rhs.is_static_pass &&
    lhs.is_valid == rhs.is_valid;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::nubot_common::PassCommands_<ContainerAllocator1> & lhs, const ::nubot_common::PassCommands_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace nubot_common

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::nubot_common::PassCommands_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nubot_common::PassCommands_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nubot_common::PassCommands_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nubot_common::PassCommands_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nubot_common::PassCommands_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nubot_common::PassCommands_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::nubot_common::PassCommands_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d50d66ad0a96e8d9eae8a7a9da579ad2";
  }

  static const char* value(const ::nubot_common::PassCommands_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd50d66ad0a96e8d9ULL;
  static const uint64_t static_value2 = 0xeae8a7a9da579ad2ULL;
};

template<class ContainerAllocator>
struct DataType< ::nubot_common::PassCommands_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nubot_common/PassCommands";
  }

  static const char* value(const ::nubot_common::PassCommands_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::nubot_common::PassCommands_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32  pass_id\n"
"uint32  catch_id\n"
"Point2d pass_pt\n"
"Point2d catch_pt\n"
"bool    is_passout\n"
"bool    is_dynamic_pass\n"
"bool    is_static_pass\n"
"bool    is_valid\n"
" \n"
"\n"
"================================================================================\n"
"MSG: nubot_common/Point2d\n"
"float32 x\n"
"float32 y\n"
;
  }

  static const char* value(const ::nubot_common::PassCommands_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::nubot_common::PassCommands_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pass_id);
      stream.next(m.catch_id);
      stream.next(m.pass_pt);
      stream.next(m.catch_pt);
      stream.next(m.is_passout);
      stream.next(m.is_dynamic_pass);
      stream.next(m.is_static_pass);
      stream.next(m.is_valid);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PassCommands_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nubot_common::PassCommands_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::nubot_common::PassCommands_<ContainerAllocator>& v)
  {
    s << indent << "pass_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.pass_id);
    s << indent << "catch_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.catch_id);
    s << indent << "pass_pt: ";
    s << std::endl;
    Printer< ::nubot_common::Point2d_<ContainerAllocator> >::stream(s, indent + "  ", v.pass_pt);
    s << indent << "catch_pt: ";
    s << std::endl;
    Printer< ::nubot_common::Point2d_<ContainerAllocator> >::stream(s, indent + "  ", v.catch_pt);
    s << indent << "is_passout: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_passout);
    s << indent << "is_dynamic_pass: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_dynamic_pass);
    s << indent << "is_static_pass: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_static_pass);
    s << indent << "is_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_valid);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NUBOT_COMMON_MESSAGE_PASSCOMMANDS_H
