// Generated by gencpp from file nubot_common/RobotInfo.msg
// DO NOT EDIT!


#ifndef NUBOT_COMMON_MESSAGE_ROBOTINFO_H
#define NUBOT_COMMON_MESSAGE_ROBOTINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <nubot_common/Point2d.h>
#include <nubot_common/Angle.h>
#include <nubot_common/Point2d.h>
#include <nubot_common/Point2d.h>

namespace nubot_common
{
template <class ContainerAllocator>
struct RobotInfo_
{
  typedef RobotInfo_<ContainerAllocator> Type;

  RobotInfo_()
    : header()
    , AgentID(0)
    , targetNum1(0)
    , targetNum2(0)
    , targetNum3(0)
    , targetNum4(0)
    , staticpassNum(0)
    , staticcatchNum(0)
    , pos()
    , heading()
    , vrot(0.0)
    , vtrans()
    , iskick(false)
    , isvalid(false)
    , isstuck(false)
    , isdribble(false)
    , current_role(0)
    , role_time(0.0)
    , target()  {
    }
  RobotInfo_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , AgentID(0)
    , targetNum1(0)
    , targetNum2(0)
    , targetNum3(0)
    , targetNum4(0)
    , staticpassNum(0)
    , staticcatchNum(0)
    , pos(_alloc)
    , heading(_alloc)
    , vrot(0.0)
    , vtrans(_alloc)
    , iskick(false)
    , isvalid(false)
    , isstuck(false)
    , isdribble(false)
    , current_role(0)
    , role_time(0.0)
    , target(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _AgentID_type;
  _AgentID_type AgentID;

   typedef int32_t _targetNum1_type;
  _targetNum1_type targetNum1;

   typedef int32_t _targetNum2_type;
  _targetNum2_type targetNum2;

   typedef int32_t _targetNum3_type;
  _targetNum3_type targetNum3;

   typedef int32_t _targetNum4_type;
  _targetNum4_type targetNum4;

   typedef int32_t _staticpassNum_type;
  _staticpassNum_type staticpassNum;

   typedef int32_t _staticcatchNum_type;
  _staticcatchNum_type staticcatchNum;

   typedef  ::nubot_common::Point2d_<ContainerAllocator>  _pos_type;
  _pos_type pos;

   typedef  ::nubot_common::Angle_<ContainerAllocator>  _heading_type;
  _heading_type heading;

   typedef float _vrot_type;
  _vrot_type vrot;

   typedef  ::nubot_common::Point2d_<ContainerAllocator>  _vtrans_type;
  _vtrans_type vtrans;

   typedef uint8_t _iskick_type;
  _iskick_type iskick;

   typedef uint8_t _isvalid_type;
  _isvalid_type isvalid;

   typedef uint8_t _isstuck_type;
  _isstuck_type isstuck;

   typedef uint8_t _isdribble_type;
  _isdribble_type isdribble;

   typedef uint8_t _current_role_type;
  _current_role_type current_role;

   typedef float _role_time_type;
  _role_time_type role_time;

   typedef  ::nubot_common::Point2d_<ContainerAllocator>  _target_type;
  _target_type target;





  typedef boost::shared_ptr< ::nubot_common::RobotInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nubot_common::RobotInfo_<ContainerAllocator> const> ConstPtr;

}; // struct RobotInfo_

typedef ::nubot_common::RobotInfo_<std::allocator<void> > RobotInfo;

typedef boost::shared_ptr< ::nubot_common::RobotInfo > RobotInfoPtr;
typedef boost::shared_ptr< ::nubot_common::RobotInfo const> RobotInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::nubot_common::RobotInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::nubot_common::RobotInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::nubot_common::RobotInfo_<ContainerAllocator1> & lhs, const ::nubot_common::RobotInfo_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.AgentID == rhs.AgentID &&
    lhs.targetNum1 == rhs.targetNum1 &&
    lhs.targetNum2 == rhs.targetNum2 &&
    lhs.targetNum3 == rhs.targetNum3 &&
    lhs.targetNum4 == rhs.targetNum4 &&
    lhs.staticpassNum == rhs.staticpassNum &&
    lhs.staticcatchNum == rhs.staticcatchNum &&
    lhs.pos == rhs.pos &&
    lhs.heading == rhs.heading &&
    lhs.vrot == rhs.vrot &&
    lhs.vtrans == rhs.vtrans &&
    lhs.iskick == rhs.iskick &&
    lhs.isvalid == rhs.isvalid &&
    lhs.isstuck == rhs.isstuck &&
    lhs.isdribble == rhs.isdribble &&
    lhs.current_role == rhs.current_role &&
    lhs.role_time == rhs.role_time &&
    lhs.target == rhs.target;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::nubot_common::RobotInfo_<ContainerAllocator1> & lhs, const ::nubot_common::RobotInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace nubot_common

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::nubot_common::RobotInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nubot_common::RobotInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nubot_common::RobotInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nubot_common::RobotInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nubot_common::RobotInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nubot_common::RobotInfo_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::nubot_common::RobotInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b4ae67161bf4b86c0bc4c4f720e02189";
  }

  static const char* value(const ::nubot_common::RobotInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb4ae67161bf4b86cULL;
  static const uint64_t static_value2 = 0x0bc4c4f720e02189ULL;
};

template<class ContainerAllocator>
struct DataType< ::nubot_common::RobotInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nubot_common/RobotInfo";
  }

  static const char* value(const ::nubot_common::RobotInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::nubot_common::RobotInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"int32    AgentID\n"
"int32    targetNum1\n"
"int32    targetNum2\n"
"int32    targetNum3\n"
"int32    targetNum4\n"
"int32    staticpassNum\n"
"int32    staticcatchNum\n"
"Point2d  pos\n"
"Angle    heading\n"
"float32  vrot\n"
"Point2d  vtrans\n"
"bool     iskick     \n"
"bool     isvalid \n"
"bool     isstuck \n"
"bool     isdribble\n"
"char     current_role\n"
"float32  role_time\n"
"Point2d  target\n"
" \n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: nubot_common/Point2d\n"
"float32 x\n"
"float32 y\n"
"\n"
"================================================================================\n"
"MSG: nubot_common/Angle\n"
"float32 theta\n"
;
  }

  static const char* value(const ::nubot_common::RobotInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::nubot_common::RobotInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.AgentID);
      stream.next(m.targetNum1);
      stream.next(m.targetNum2);
      stream.next(m.targetNum3);
      stream.next(m.targetNum4);
      stream.next(m.staticpassNum);
      stream.next(m.staticcatchNum);
      stream.next(m.pos);
      stream.next(m.heading);
      stream.next(m.vrot);
      stream.next(m.vtrans);
      stream.next(m.iskick);
      stream.next(m.isvalid);
      stream.next(m.isstuck);
      stream.next(m.isdribble);
      stream.next(m.current_role);
      stream.next(m.role_time);
      stream.next(m.target);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nubot_common::RobotInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::nubot_common::RobotInfo_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "AgentID: ";
    Printer<int32_t>::stream(s, indent + "  ", v.AgentID);
    s << indent << "targetNum1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.targetNum1);
    s << indent << "targetNum2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.targetNum2);
    s << indent << "targetNum3: ";
    Printer<int32_t>::stream(s, indent + "  ", v.targetNum3);
    s << indent << "targetNum4: ";
    Printer<int32_t>::stream(s, indent + "  ", v.targetNum4);
    s << indent << "staticpassNum: ";
    Printer<int32_t>::stream(s, indent + "  ", v.staticpassNum);
    s << indent << "staticcatchNum: ";
    Printer<int32_t>::stream(s, indent + "  ", v.staticcatchNum);
    s << indent << "pos: ";
    s << std::endl;
    Printer< ::nubot_common::Point2d_<ContainerAllocator> >::stream(s, indent + "  ", v.pos);
    s << indent << "heading: ";
    s << std::endl;
    Printer< ::nubot_common::Angle_<ContainerAllocator> >::stream(s, indent + "  ", v.heading);
    s << indent << "vrot: ";
    Printer<float>::stream(s, indent + "  ", v.vrot);
    s << indent << "vtrans: ";
    s << std::endl;
    Printer< ::nubot_common::Point2d_<ContainerAllocator> >::stream(s, indent + "  ", v.vtrans);
    s << indent << "iskick: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.iskick);
    s << indent << "isvalid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isvalid);
    s << indent << "isstuck: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isstuck);
    s << indent << "isdribble: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isdribble);
    s << indent << "current_role: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.current_role);
    s << indent << "role_time: ";
    Printer<float>::stream(s, indent + "  ", v.role_time);
    s << indent << "target: ";
    s << std::endl;
    Printer< ::nubot_common::Point2d_<ContainerAllocator> >::stream(s, indent + "  ", v.target);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NUBOT_COMMON_MESSAGE_ROBOTINFO_H
