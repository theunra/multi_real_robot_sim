// Generated by gencpp from file nubot_common/CoachInfo.msg
// DO NOT EDIT!


#ifndef NUBOT_COMMON_MESSAGE_COACHINFO_H
#define NUBOT_COMMON_MESSAGE_COACHINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <nubot_common/Point2d.h>
#include <nubot_common/Point2d.h>

namespace nubot_common
{
template <class ContainerAllocator>
struct CoachInfo_
{
  typedef CoachInfo_<ContainerAllocator> Type;

  CoachInfo_()
    : header()
    , MatchMode(0)
    , MatchType(0)
    , TestMode(0)
    , pointA()
    , pointB()
    , angleA(0)
    , angleB(0)
    , idA(0)
    , idB(0)
    , kickforce(0)  {
    }
  CoachInfo_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , MatchMode(0)
    , MatchType(0)
    , TestMode(0)
    , pointA(_alloc)
    , pointB(_alloc)
    , angleA(0)
    , angleB(0)
    , idA(0)
    , idB(0)
    , kickforce(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _MatchMode_type;
  _MatchMode_type MatchMode;

   typedef uint8_t _MatchType_type;
  _MatchType_type MatchType;

   typedef uint8_t _TestMode_type;
  _TestMode_type TestMode;

   typedef  ::nubot_common::Point2d_<ContainerAllocator>  _pointA_type;
  _pointA_type pointA;

   typedef  ::nubot_common::Point2d_<ContainerAllocator>  _pointB_type;
  _pointB_type pointB;

   typedef int16_t _angleA_type;
  _angleA_type angleA;

   typedef int16_t _angleB_type;
  _angleB_type angleB;

   typedef uint8_t _idA_type;
  _idA_type idA;

   typedef uint8_t _idB_type;
  _idB_type idB;

   typedef uint8_t _kickforce_type;
  _kickforce_type kickforce;





  typedef boost::shared_ptr< ::nubot_common::CoachInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nubot_common::CoachInfo_<ContainerAllocator> const> ConstPtr;

}; // struct CoachInfo_

typedef ::nubot_common::CoachInfo_<std::allocator<void> > CoachInfo;

typedef boost::shared_ptr< ::nubot_common::CoachInfo > CoachInfoPtr;
typedef boost::shared_ptr< ::nubot_common::CoachInfo const> CoachInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::nubot_common::CoachInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::nubot_common::CoachInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::nubot_common::CoachInfo_<ContainerAllocator1> & lhs, const ::nubot_common::CoachInfo_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.MatchMode == rhs.MatchMode &&
    lhs.MatchType == rhs.MatchType &&
    lhs.TestMode == rhs.TestMode &&
    lhs.pointA == rhs.pointA &&
    lhs.pointB == rhs.pointB &&
    lhs.angleA == rhs.angleA &&
    lhs.angleB == rhs.angleB &&
    lhs.idA == rhs.idA &&
    lhs.idB == rhs.idB &&
    lhs.kickforce == rhs.kickforce;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::nubot_common::CoachInfo_<ContainerAllocator1> & lhs, const ::nubot_common::CoachInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace nubot_common

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::nubot_common::CoachInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nubot_common::CoachInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nubot_common::CoachInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nubot_common::CoachInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nubot_common::CoachInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nubot_common::CoachInfo_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::nubot_common::CoachInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7bb01a0f4328cb28beb61d4f502c2969";
  }

  static const char* value(const ::nubot_common::CoachInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7bb01a0f4328cb28ULL;
  static const uint64_t static_value2 = 0xbeb61d4f502c2969ULL;
};

template<class ContainerAllocator>
struct DataType< ::nubot_common::CoachInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nubot_common/CoachInfo";
  }

  static const char* value(const ::nubot_common::CoachInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::nubot_common::CoachInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"char MatchMode\n"
"char MatchType\n"
"char TestMode           \n"
"Point2d pointA\n"
"Point2d pointB\n"
"int16 angleA\n"
"int16 angleB\n"
"char idA\n"
"char idB\n"
"char kickforce\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: nubot_common/Point2d\n"
"float32 x\n"
"float32 y\n"
;
  }

  static const char* value(const ::nubot_common::CoachInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::nubot_common::CoachInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.MatchMode);
      stream.next(m.MatchType);
      stream.next(m.TestMode);
      stream.next(m.pointA);
      stream.next(m.pointB);
      stream.next(m.angleA);
      stream.next(m.angleB);
      stream.next(m.idA);
      stream.next(m.idB);
      stream.next(m.kickforce);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CoachInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nubot_common::CoachInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::nubot_common::CoachInfo_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "MatchMode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.MatchMode);
    s << indent << "MatchType: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.MatchType);
    s << indent << "TestMode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.TestMode);
    s << indent << "pointA: ";
    s << std::endl;
    Printer< ::nubot_common::Point2d_<ContainerAllocator> >::stream(s, indent + "  ", v.pointA);
    s << indent << "pointB: ";
    s << std::endl;
    Printer< ::nubot_common::Point2d_<ContainerAllocator> >::stream(s, indent + "  ", v.pointB);
    s << indent << "angleA: ";
    Printer<int16_t>::stream(s, indent + "  ", v.angleA);
    s << indent << "angleB: ";
    Printer<int16_t>::stream(s, indent + "  ", v.angleB);
    s << indent << "idA: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.idA);
    s << indent << "idB: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.idB);
    s << indent << "kickforce: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.kickforce);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NUBOT_COMMON_MESSAGE_COACHINFO_H
