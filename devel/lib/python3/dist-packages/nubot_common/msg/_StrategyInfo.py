# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from nubot_common/StrategyInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import nubot_common.msg
import std_msgs.msg

class StrategyInfo(genpy.Message):
  _md5sum = "9983cea3e357670f055f12d4322a06c9"
  _type = "nubot_common/StrategyInfo"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header   header
int32    AgentID
int32    targetNum1
int32    targetNum2
int32    targetNum3
int32    targetNum4
int32    staticpassNum
int32    staticcatchNum
uint32   role
uint32   action
bool     is_dribble
bool     is_kickoff
float32  role_time
PassCommands  pass_cmd




================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: nubot_common/PassCommands
uint32  pass_id
uint32  catch_id
Point2d pass_pt
Point2d catch_pt
bool    is_passout
bool    is_dynamic_pass
bool    is_static_pass
bool    is_valid
 

================================================================================
MSG: nubot_common/Point2d
float32 x
float32 y
"""
  __slots__ = ['header','AgentID','targetNum1','targetNum2','targetNum3','targetNum4','staticpassNum','staticcatchNum','role','action','is_dribble','is_kickoff','role_time','pass_cmd']
  _slot_types = ['std_msgs/Header','int32','int32','int32','int32','int32','int32','int32','uint32','uint32','bool','bool','float32','nubot_common/PassCommands']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,AgentID,targetNum1,targetNum2,targetNum3,targetNum4,staticpassNum,staticcatchNum,role,action,is_dribble,is_kickoff,role_time,pass_cmd

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(StrategyInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.AgentID is None:
        self.AgentID = 0
      if self.targetNum1 is None:
        self.targetNum1 = 0
      if self.targetNum2 is None:
        self.targetNum2 = 0
      if self.targetNum3 is None:
        self.targetNum3 = 0
      if self.targetNum4 is None:
        self.targetNum4 = 0
      if self.staticpassNum is None:
        self.staticpassNum = 0
      if self.staticcatchNum is None:
        self.staticcatchNum = 0
      if self.role is None:
        self.role = 0
      if self.action is None:
        self.action = 0
      if self.is_dribble is None:
        self.is_dribble = False
      if self.is_kickoff is None:
        self.is_kickoff = False
      if self.role_time is None:
        self.role_time = 0.
      if self.pass_cmd is None:
        self.pass_cmd = nubot_common.msg.PassCommands()
    else:
      self.header = std_msgs.msg.Header()
      self.AgentID = 0
      self.targetNum1 = 0
      self.targetNum2 = 0
      self.targetNum3 = 0
      self.targetNum4 = 0
      self.staticpassNum = 0
      self.staticcatchNum = 0
      self.role = 0
      self.action = 0
      self.is_dribble = False
      self.is_kickoff = False
      self.role_time = 0.
      self.pass_cmd = nubot_common.msg.PassCommands()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7i2I2Bf2I4f4B().pack(_x.AgentID, _x.targetNum1, _x.targetNum2, _x.targetNum3, _x.targetNum4, _x.staticpassNum, _x.staticcatchNum, _x.role, _x.action, _x.is_dribble, _x.is_kickoff, _x.role_time, _x.pass_cmd.pass_id, _x.pass_cmd.catch_id, _x.pass_cmd.pass_pt.x, _x.pass_cmd.pass_pt.y, _x.pass_cmd.catch_pt.x, _x.pass_cmd.catch_pt.y, _x.pass_cmd.is_passout, _x.pass_cmd.is_dynamic_pass, _x.pass_cmd.is_static_pass, _x.pass_cmd.is_valid))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.pass_cmd is None:
        self.pass_cmd = nubot_common.msg.PassCommands()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 70
      (_x.AgentID, _x.targetNum1, _x.targetNum2, _x.targetNum3, _x.targetNum4, _x.staticpassNum, _x.staticcatchNum, _x.role, _x.action, _x.is_dribble, _x.is_kickoff, _x.role_time, _x.pass_cmd.pass_id, _x.pass_cmd.catch_id, _x.pass_cmd.pass_pt.x, _x.pass_cmd.pass_pt.y, _x.pass_cmd.catch_pt.x, _x.pass_cmd.catch_pt.y, _x.pass_cmd.is_passout, _x.pass_cmd.is_dynamic_pass, _x.pass_cmd.is_static_pass, _x.pass_cmd.is_valid,) = _get_struct_7i2I2Bf2I4f4B().unpack(str[start:end])
      self.is_dribble = bool(self.is_dribble)
      self.is_kickoff = bool(self.is_kickoff)
      self.pass_cmd.is_passout = bool(self.pass_cmd.is_passout)
      self.pass_cmd.is_dynamic_pass = bool(self.pass_cmd.is_dynamic_pass)
      self.pass_cmd.is_static_pass = bool(self.pass_cmd.is_static_pass)
      self.pass_cmd.is_valid = bool(self.pass_cmd.is_valid)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7i2I2Bf2I4f4B().pack(_x.AgentID, _x.targetNum1, _x.targetNum2, _x.targetNum3, _x.targetNum4, _x.staticpassNum, _x.staticcatchNum, _x.role, _x.action, _x.is_dribble, _x.is_kickoff, _x.role_time, _x.pass_cmd.pass_id, _x.pass_cmd.catch_id, _x.pass_cmd.pass_pt.x, _x.pass_cmd.pass_pt.y, _x.pass_cmd.catch_pt.x, _x.pass_cmd.catch_pt.y, _x.pass_cmd.is_passout, _x.pass_cmd.is_dynamic_pass, _x.pass_cmd.is_static_pass, _x.pass_cmd.is_valid))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.pass_cmd is None:
        self.pass_cmd = nubot_common.msg.PassCommands()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 70
      (_x.AgentID, _x.targetNum1, _x.targetNum2, _x.targetNum3, _x.targetNum4, _x.staticpassNum, _x.staticcatchNum, _x.role, _x.action, _x.is_dribble, _x.is_kickoff, _x.role_time, _x.pass_cmd.pass_id, _x.pass_cmd.catch_id, _x.pass_cmd.pass_pt.x, _x.pass_cmd.pass_pt.y, _x.pass_cmd.catch_pt.x, _x.pass_cmd.catch_pt.y, _x.pass_cmd.is_passout, _x.pass_cmd.is_dynamic_pass, _x.pass_cmd.is_static_pass, _x.pass_cmd.is_valid,) = _get_struct_7i2I2Bf2I4f4B().unpack(str[start:end])
      self.is_dribble = bool(self.is_dribble)
      self.is_kickoff = bool(self.is_kickoff)
      self.pass_cmd.is_passout = bool(self.pass_cmd.is_passout)
      self.pass_cmd.is_dynamic_pass = bool(self.pass_cmd.is_dynamic_pass)
      self.pass_cmd.is_static_pass = bool(self.pass_cmd.is_static_pass)
      self.pass_cmd.is_valid = bool(self.pass_cmd.is_valid)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_7i2I2Bf2I4f4B = None
def _get_struct_7i2I2Bf2I4f4B():
    global _struct_7i2I2Bf2I4f4B
    if _struct_7i2I2Bf2I4f4B is None:
        _struct_7i2I2Bf2I4f4B = struct.Struct("<7i2I2Bf2I4f4B")
    return _struct_7i2I2Bf2I4f4B
