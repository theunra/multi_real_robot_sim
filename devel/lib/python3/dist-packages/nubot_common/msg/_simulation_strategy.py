# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from nubot_common/simulation_strategy.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import nubot_common.msg
import std_msgs.msg

class simulation_strategy(genpy.Message):
  _md5sum = "1d84999556ec502fdeaed67902dd635f"
  _type = "nubot_common/simulation_strategy"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """StrategyInfo[] strategy_msgs

================================================================================
MSG: nubot_common/StrategyInfo
Header   header
int32    AgentID
int32    targetNum1
int32    targetNum2
int32    targetNum3
int32    targetNum4
int32    staticpassNum
int32    staticcatchNum
uint32   role
uint32   action
bool     is_dribble
bool     is_kickoff
float32  role_time
PassCommands  pass_cmd




================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: nubot_common/PassCommands
uint32  pass_id
uint32  catch_id
Point2d pass_pt
Point2d catch_pt
bool    is_passout
bool    is_dynamic_pass
bool    is_static_pass
bool    is_valid
 

================================================================================
MSG: nubot_common/Point2d
float32 x
float32 y
"""
  __slots__ = ['strategy_msgs']
  _slot_types = ['nubot_common/StrategyInfo[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       strategy_msgs

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(simulation_strategy, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.strategy_msgs is None:
        self.strategy_msgs = []
    else:
      self.strategy_msgs = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.strategy_msgs)
      buff.write(_struct_I.pack(length))
      for val1 in self.strategy_msgs:
        _v1 = val1.header
        _x = _v1.seq
        buff.write(_get_struct_I().pack(_x))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_7i2I2Bf().pack(_x.AgentID, _x.targetNum1, _x.targetNum2, _x.targetNum3, _x.targetNum4, _x.staticpassNum, _x.staticcatchNum, _x.role, _x.action, _x.is_dribble, _x.is_kickoff, _x.role_time))
        _v3 = val1.pass_cmd
        _x = _v3
        buff.write(_get_struct_2I().pack(_x.pass_id, _x.catch_id))
        _v4 = _v3.pass_pt
        _x = _v4
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v5 = _v3.catch_pt
        _x = _v5
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _x = _v3
        buff.write(_get_struct_4B().pack(_x.is_passout, _x.is_dynamic_pass, _x.is_static_pass, _x.is_valid))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.strategy_msgs is None:
        self.strategy_msgs = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.strategy_msgs = []
      for i in range(0, length):
        val1 = nubot_common.msg.StrategyInfo()
        _v6 = val1.header
        start = end
        end += 4
        (_v6.seq,) = _get_struct_I().unpack(str[start:end])
        _v7 = _v6.stamp
        _x = _v7
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v6.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v6.frame_id = str[start:end]
        _x = val1
        start = end
        end += 42
        (_x.AgentID, _x.targetNum1, _x.targetNum2, _x.targetNum3, _x.targetNum4, _x.staticpassNum, _x.staticcatchNum, _x.role, _x.action, _x.is_dribble, _x.is_kickoff, _x.role_time,) = _get_struct_7i2I2Bf().unpack(str[start:end])
        val1.is_dribble = bool(val1.is_dribble)
        val1.is_kickoff = bool(val1.is_kickoff)
        _v8 = val1.pass_cmd
        _x = _v8
        start = end
        end += 8
        (_x.pass_id, _x.catch_id,) = _get_struct_2I().unpack(str[start:end])
        _v9 = _v8.pass_pt
        _x = _v9
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v10 = _v8.catch_pt
        _x = _v10
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _x = _v8
        start = end
        end += 4
        (_x.is_passout, _x.is_dynamic_pass, _x.is_static_pass, _x.is_valid,) = _get_struct_4B().unpack(str[start:end])
        _v8.is_passout = bool(_v8.is_passout)
        _v8.is_dynamic_pass = bool(_v8.is_dynamic_pass)
        _v8.is_static_pass = bool(_v8.is_static_pass)
        _v8.is_valid = bool(_v8.is_valid)
        self.strategy_msgs.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.strategy_msgs)
      buff.write(_struct_I.pack(length))
      for val1 in self.strategy_msgs:
        _v11 = val1.header
        _x = _v11.seq
        buff.write(_get_struct_I().pack(_x))
        _v12 = _v11.stamp
        _x = _v12
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v11.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_7i2I2Bf().pack(_x.AgentID, _x.targetNum1, _x.targetNum2, _x.targetNum3, _x.targetNum4, _x.staticpassNum, _x.staticcatchNum, _x.role, _x.action, _x.is_dribble, _x.is_kickoff, _x.role_time))
        _v13 = val1.pass_cmd
        _x = _v13
        buff.write(_get_struct_2I().pack(_x.pass_id, _x.catch_id))
        _v14 = _v13.pass_pt
        _x = _v14
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v15 = _v13.catch_pt
        _x = _v15
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _x = _v13
        buff.write(_get_struct_4B().pack(_x.is_passout, _x.is_dynamic_pass, _x.is_static_pass, _x.is_valid))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.strategy_msgs is None:
        self.strategy_msgs = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.strategy_msgs = []
      for i in range(0, length):
        val1 = nubot_common.msg.StrategyInfo()
        _v16 = val1.header
        start = end
        end += 4
        (_v16.seq,) = _get_struct_I().unpack(str[start:end])
        _v17 = _v16.stamp
        _x = _v17
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v16.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v16.frame_id = str[start:end]
        _x = val1
        start = end
        end += 42
        (_x.AgentID, _x.targetNum1, _x.targetNum2, _x.targetNum3, _x.targetNum4, _x.staticpassNum, _x.staticcatchNum, _x.role, _x.action, _x.is_dribble, _x.is_kickoff, _x.role_time,) = _get_struct_7i2I2Bf().unpack(str[start:end])
        val1.is_dribble = bool(val1.is_dribble)
        val1.is_kickoff = bool(val1.is_kickoff)
        _v18 = val1.pass_cmd
        _x = _v18
        start = end
        end += 8
        (_x.pass_id, _x.catch_id,) = _get_struct_2I().unpack(str[start:end])
        _v19 = _v18.pass_pt
        _x = _v19
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v20 = _v18.catch_pt
        _x = _v20
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _x = _v18
        start = end
        end += 4
        (_x.is_passout, _x.is_dynamic_pass, _x.is_static_pass, _x.is_valid,) = _get_struct_4B().unpack(str[start:end])
        _v18.is_passout = bool(_v18.is_passout)
        _v18.is_dynamic_pass = bool(_v18.is_dynamic_pass)
        _v18.is_static_pass = bool(_v18.is_static_pass)
        _v18.is_valid = bool(_v18.is_valid)
        self.strategy_msgs.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_4B = None
def _get_struct_4B():
    global _struct_4B
    if _struct_4B is None:
        _struct_4B = struct.Struct("<4B")
    return _struct_4B
_struct_7i2I2Bf = None
def _get_struct_7i2I2Bf():
    global _struct_7i2I2Bf
    if _struct_7i2I2Bf is None:
        _struct_7i2I2Bf = struct.Struct("<7i2I2Bf")
    return _struct_7i2I2Bf
