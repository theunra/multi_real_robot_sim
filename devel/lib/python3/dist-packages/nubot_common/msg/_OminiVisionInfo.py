# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from nubot_common/OminiVisionInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import nubot_common.msg
import std_msgs.msg

class OminiVisionInfo(genpy.Message):
  _md5sum = "71f66ce5416c122d9955b156151ea395"
  _type = "nubot_common/OminiVisionInfo"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header

BallInfo ballinfo

ObstaclesInfo obstacleinfo

RobotInfo[]  robotinfo



================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: nubot_common/BallInfo
Header header
int32     ballinfostate
Point2d   pos
PPoint    real_pos
Point2d   velocity
bool      pos_known
bool      velocity_known


================================================================================
MSG: nubot_common/Point2d
float32 x
float32 y

================================================================================
MSG: nubot_common/PPoint
float32 angle
float32 radius

================================================================================
MSG: nubot_common/ObstaclesInfo
Header header
Point2d[] pos
PPoint[] polar_pos


================================================================================
MSG: nubot_common/RobotInfo
Header header
int32    AgentID
int32    targetNum1
int32    targetNum2
int32    targetNum3
int32    targetNum4
int32    staticpassNum
int32    staticcatchNum
Point2d  pos
Angle    heading
float32  vrot
Point2d  vtrans
bool     iskick     
bool     isvalid 
bool     isstuck 
bool     isdribble
char     current_role
float32  role_time
Point2d  target
 

================================================================================
MSG: nubot_common/Angle
float32 theta
"""
  __slots__ = ['header','ballinfo','obstacleinfo','robotinfo']
  _slot_types = ['std_msgs/Header','nubot_common/BallInfo','nubot_common/ObstaclesInfo','nubot_common/RobotInfo[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,ballinfo,obstacleinfo,robotinfo

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(OminiVisionInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ballinfo is None:
        self.ballinfo = nubot_common.msg.BallInfo()
      if self.obstacleinfo is None:
        self.obstacleinfo = nubot_common.msg.ObstaclesInfo()
      if self.robotinfo is None:
        self.robotinfo = []
    else:
      self.header = std_msgs.msg.Header()
      self.ballinfo = nubot_common.msg.BallInfo()
      self.obstacleinfo = nubot_common.msg.ObstaclesInfo()
      self.robotinfo = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.ballinfo.header.seq, _x.ballinfo.header.stamp.secs, _x.ballinfo.header.stamp.nsecs))
      _x = self.ballinfo.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_i6f2B3I().pack(_x.ballinfo.ballinfostate, _x.ballinfo.pos.x, _x.ballinfo.pos.y, _x.ballinfo.real_pos.angle, _x.ballinfo.real_pos.radius, _x.ballinfo.velocity.x, _x.ballinfo.velocity.y, _x.ballinfo.pos_known, _x.ballinfo.velocity_known, _x.obstacleinfo.header.seq, _x.obstacleinfo.header.stamp.secs, _x.obstacleinfo.header.stamp.nsecs))
      _x = self.obstacleinfo.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.obstacleinfo.pos)
      buff.write(_struct_I.pack(length))
      for val1 in self.obstacleinfo.pos:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
      length = len(self.obstacleinfo.polar_pos)
      buff.write(_struct_I.pack(length))
      for val1 in self.obstacleinfo.polar_pos:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.angle, _x.radius))
      length = len(self.robotinfo)
      buff.write(_struct_I.pack(length))
      for val1 in self.robotinfo:
        _v1 = val1.header
        _x = _v1.seq
        buff.write(_get_struct_I().pack(_x))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_7i().pack(_x.AgentID, _x.targetNum1, _x.targetNum2, _x.targetNum3, _x.targetNum4, _x.staticpassNum, _x.staticcatchNum))
        _v3 = val1.pos
        _x = _v3
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v4 = val1.heading
        _x = _v4.theta
        buff.write(_get_struct_f().pack(_x))
        _x = val1.vrot
        buff.write(_get_struct_f().pack(_x))
        _v5 = val1.vtrans
        _x = _v5
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _x = val1
        buff.write(_get_struct_5Bf().pack(_x.iskick, _x.isvalid, _x.isstuck, _x.isdribble, _x.current_role, _x.role_time))
        _v6 = val1.target
        _x = _v6
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ballinfo is None:
        self.ballinfo = nubot_common.msg.BallInfo()
      if self.obstacleinfo is None:
        self.obstacleinfo = nubot_common.msg.ObstaclesInfo()
      if self.robotinfo is None:
        self.robotinfo = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.ballinfo.header.seq, _x.ballinfo.header.stamp.secs, _x.ballinfo.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ballinfo.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.ballinfo.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 42
      (_x.ballinfo.ballinfostate, _x.ballinfo.pos.x, _x.ballinfo.pos.y, _x.ballinfo.real_pos.angle, _x.ballinfo.real_pos.radius, _x.ballinfo.velocity.x, _x.ballinfo.velocity.y, _x.ballinfo.pos_known, _x.ballinfo.velocity_known, _x.obstacleinfo.header.seq, _x.obstacleinfo.header.stamp.secs, _x.obstacleinfo.header.stamp.nsecs,) = _get_struct_i6f2B3I().unpack(str[start:end])
      self.ballinfo.pos_known = bool(self.ballinfo.pos_known)
      self.ballinfo.velocity_known = bool(self.ballinfo.velocity_known)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.obstacleinfo.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.obstacleinfo.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.obstacleinfo.pos = []
      for i in range(0, length):
        val1 = nubot_common.msg.Point2d()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.obstacleinfo.pos.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.obstacleinfo.polar_pos = []
      for i in range(0, length):
        val1 = nubot_common.msg.PPoint()
        _x = val1
        start = end
        end += 8
        (_x.angle, _x.radius,) = _get_struct_2f().unpack(str[start:end])
        self.obstacleinfo.polar_pos.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.robotinfo = []
      for i in range(0, length):
        val1 = nubot_common.msg.RobotInfo()
        _v7 = val1.header
        start = end
        end += 4
        (_v7.seq,) = _get_struct_I().unpack(str[start:end])
        _v8 = _v7.stamp
        _x = _v8
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v7.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v7.frame_id = str[start:end]
        _x = val1
        start = end
        end += 28
        (_x.AgentID, _x.targetNum1, _x.targetNum2, _x.targetNum3, _x.targetNum4, _x.staticpassNum, _x.staticcatchNum,) = _get_struct_7i().unpack(str[start:end])
        _v9 = val1.pos
        _x = _v9
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v10 = val1.heading
        start = end
        end += 4
        (_v10.theta,) = _get_struct_f().unpack(str[start:end])
        start = end
        end += 4
        (val1.vrot,) = _get_struct_f().unpack(str[start:end])
        _v11 = val1.vtrans
        _x = _v11
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _x = val1
        start = end
        end += 9
        (_x.iskick, _x.isvalid, _x.isstuck, _x.isdribble, _x.current_role, _x.role_time,) = _get_struct_5Bf().unpack(str[start:end])
        val1.iskick = bool(val1.iskick)
        val1.isvalid = bool(val1.isvalid)
        val1.isstuck = bool(val1.isstuck)
        val1.isdribble = bool(val1.isdribble)
        _v12 = val1.target
        _x = _v12
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.robotinfo.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.ballinfo.header.seq, _x.ballinfo.header.stamp.secs, _x.ballinfo.header.stamp.nsecs))
      _x = self.ballinfo.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_i6f2B3I().pack(_x.ballinfo.ballinfostate, _x.ballinfo.pos.x, _x.ballinfo.pos.y, _x.ballinfo.real_pos.angle, _x.ballinfo.real_pos.radius, _x.ballinfo.velocity.x, _x.ballinfo.velocity.y, _x.ballinfo.pos_known, _x.ballinfo.velocity_known, _x.obstacleinfo.header.seq, _x.obstacleinfo.header.stamp.secs, _x.obstacleinfo.header.stamp.nsecs))
      _x = self.obstacleinfo.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.obstacleinfo.pos)
      buff.write(_struct_I.pack(length))
      for val1 in self.obstacleinfo.pos:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
      length = len(self.obstacleinfo.polar_pos)
      buff.write(_struct_I.pack(length))
      for val1 in self.obstacleinfo.polar_pos:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.angle, _x.radius))
      length = len(self.robotinfo)
      buff.write(_struct_I.pack(length))
      for val1 in self.robotinfo:
        _v13 = val1.header
        _x = _v13.seq
        buff.write(_get_struct_I().pack(_x))
        _v14 = _v13.stamp
        _x = _v14
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v13.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_7i().pack(_x.AgentID, _x.targetNum1, _x.targetNum2, _x.targetNum3, _x.targetNum4, _x.staticpassNum, _x.staticcatchNum))
        _v15 = val1.pos
        _x = _v15
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _v16 = val1.heading
        _x = _v16.theta
        buff.write(_get_struct_f().pack(_x))
        _x = val1.vrot
        buff.write(_get_struct_f().pack(_x))
        _v17 = val1.vtrans
        _x = _v17
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _x = val1
        buff.write(_get_struct_5Bf().pack(_x.iskick, _x.isvalid, _x.isstuck, _x.isdribble, _x.current_role, _x.role_time))
        _v18 = val1.target
        _x = _v18
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ballinfo is None:
        self.ballinfo = nubot_common.msg.BallInfo()
      if self.obstacleinfo is None:
        self.obstacleinfo = nubot_common.msg.ObstaclesInfo()
      if self.robotinfo is None:
        self.robotinfo = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.ballinfo.header.seq, _x.ballinfo.header.stamp.secs, _x.ballinfo.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ballinfo.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.ballinfo.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 42
      (_x.ballinfo.ballinfostate, _x.ballinfo.pos.x, _x.ballinfo.pos.y, _x.ballinfo.real_pos.angle, _x.ballinfo.real_pos.radius, _x.ballinfo.velocity.x, _x.ballinfo.velocity.y, _x.ballinfo.pos_known, _x.ballinfo.velocity_known, _x.obstacleinfo.header.seq, _x.obstacleinfo.header.stamp.secs, _x.obstacleinfo.header.stamp.nsecs,) = _get_struct_i6f2B3I().unpack(str[start:end])
      self.ballinfo.pos_known = bool(self.ballinfo.pos_known)
      self.ballinfo.velocity_known = bool(self.ballinfo.velocity_known)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.obstacleinfo.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.obstacleinfo.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.obstacleinfo.pos = []
      for i in range(0, length):
        val1 = nubot_common.msg.Point2d()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.obstacleinfo.pos.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.obstacleinfo.polar_pos = []
      for i in range(0, length):
        val1 = nubot_common.msg.PPoint()
        _x = val1
        start = end
        end += 8
        (_x.angle, _x.radius,) = _get_struct_2f().unpack(str[start:end])
        self.obstacleinfo.polar_pos.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.robotinfo = []
      for i in range(0, length):
        val1 = nubot_common.msg.RobotInfo()
        _v19 = val1.header
        start = end
        end += 4
        (_v19.seq,) = _get_struct_I().unpack(str[start:end])
        _v20 = _v19.stamp
        _x = _v20
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v19.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v19.frame_id = str[start:end]
        _x = val1
        start = end
        end += 28
        (_x.AgentID, _x.targetNum1, _x.targetNum2, _x.targetNum3, _x.targetNum4, _x.staticpassNum, _x.staticcatchNum,) = _get_struct_7i().unpack(str[start:end])
        _v21 = val1.pos
        _x = _v21
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _v22 = val1.heading
        start = end
        end += 4
        (_v22.theta,) = _get_struct_f().unpack(str[start:end])
        start = end
        end += 4
        (val1.vrot,) = _get_struct_f().unpack(str[start:end])
        _v23 = val1.vtrans
        _x = _v23
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        _x = val1
        start = end
        end += 9
        (_x.iskick, _x.isvalid, _x.isstuck, _x.isdribble, _x.current_role, _x.role_time,) = _get_struct_5Bf().unpack(str[start:end])
        val1.iskick = bool(val1.iskick)
        val1.isvalid = bool(val1.isvalid)
        val1.isstuck = bool(val1.isstuck)
        val1.isdribble = bool(val1.isdribble)
        _v24 = val1.target
        _x = _v24
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.robotinfo.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_5Bf = None
def _get_struct_5Bf():
    global _struct_5Bf
    if _struct_5Bf is None:
        _struct_5Bf = struct.Struct("<5Bf")
    return _struct_5Bf
_struct_7i = None
def _get_struct_7i():
    global _struct_7i
    if _struct_7i is None:
        _struct_7i = struct.Struct("<7i")
    return _struct_7i
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
_struct_i6f2B3I = None
def _get_struct_i6f2B3I():
    global _struct_i6f2B3I
    if _struct_i6f2B3I is None:
        _struct_i6f2B3I = struct.Struct("<i6f2B3I")
    return _struct_i6f2B3I
