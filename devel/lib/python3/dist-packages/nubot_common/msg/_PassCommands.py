# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from nubot_common/PassCommands.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import nubot_common.msg

class PassCommands(genpy.Message):
  _md5sum = "d50d66ad0a96e8d9eae8a7a9da579ad2"
  _type = "nubot_common/PassCommands"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32  pass_id
uint32  catch_id
Point2d pass_pt
Point2d catch_pt
bool    is_passout
bool    is_dynamic_pass
bool    is_static_pass
bool    is_valid
 

================================================================================
MSG: nubot_common/Point2d
float32 x
float32 y
"""
  __slots__ = ['pass_id','catch_id','pass_pt','catch_pt','is_passout','is_dynamic_pass','is_static_pass','is_valid']
  _slot_types = ['uint32','uint32','nubot_common/Point2d','nubot_common/Point2d','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       pass_id,catch_id,pass_pt,catch_pt,is_passout,is_dynamic_pass,is_static_pass,is_valid

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PassCommands, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.pass_id is None:
        self.pass_id = 0
      if self.catch_id is None:
        self.catch_id = 0
      if self.pass_pt is None:
        self.pass_pt = nubot_common.msg.Point2d()
      if self.catch_pt is None:
        self.catch_pt = nubot_common.msg.Point2d()
      if self.is_passout is None:
        self.is_passout = False
      if self.is_dynamic_pass is None:
        self.is_dynamic_pass = False
      if self.is_static_pass is None:
        self.is_static_pass = False
      if self.is_valid is None:
        self.is_valid = False
    else:
      self.pass_id = 0
      self.catch_id = 0
      self.pass_pt = nubot_common.msg.Point2d()
      self.catch_pt = nubot_common.msg.Point2d()
      self.is_passout = False
      self.is_dynamic_pass = False
      self.is_static_pass = False
      self.is_valid = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2I4f4B().pack(_x.pass_id, _x.catch_id, _x.pass_pt.x, _x.pass_pt.y, _x.catch_pt.x, _x.catch_pt.y, _x.is_passout, _x.is_dynamic_pass, _x.is_static_pass, _x.is_valid))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.pass_pt is None:
        self.pass_pt = nubot_common.msg.Point2d()
      if self.catch_pt is None:
        self.catch_pt = nubot_common.msg.Point2d()
      end = 0
      _x = self
      start = end
      end += 28
      (_x.pass_id, _x.catch_id, _x.pass_pt.x, _x.pass_pt.y, _x.catch_pt.x, _x.catch_pt.y, _x.is_passout, _x.is_dynamic_pass, _x.is_static_pass, _x.is_valid,) = _get_struct_2I4f4B().unpack(str[start:end])
      self.is_passout = bool(self.is_passout)
      self.is_dynamic_pass = bool(self.is_dynamic_pass)
      self.is_static_pass = bool(self.is_static_pass)
      self.is_valid = bool(self.is_valid)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2I4f4B().pack(_x.pass_id, _x.catch_id, _x.pass_pt.x, _x.pass_pt.y, _x.catch_pt.x, _x.catch_pt.y, _x.is_passout, _x.is_dynamic_pass, _x.is_static_pass, _x.is_valid))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.pass_pt is None:
        self.pass_pt = nubot_common.msg.Point2d()
      if self.catch_pt is None:
        self.catch_pt = nubot_common.msg.Point2d()
      end = 0
      _x = self
      start = end
      end += 28
      (_x.pass_id, _x.catch_id, _x.pass_pt.x, _x.pass_pt.y, _x.catch_pt.x, _x.catch_pt.y, _x.is_passout, _x.is_dynamic_pass, _x.is_static_pass, _x.is_valid,) = _get_struct_2I4f4B().unpack(str[start:end])
      self.is_passout = bool(self.is_passout)
      self.is_dynamic_pass = bool(self.is_dynamic_pass)
      self.is_static_pass = bool(self.is_static_pass)
      self.is_valid = bool(self.is_valid)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I4f4B = None
def _get_struct_2I4f4B():
    global _struct_2I4f4B
    if _struct_2I4f4B is None:
        _struct_2I4f4B = struct.Struct("<2I4f4B")
    return _struct_2I4f4B
